#CODE SNIPPET
#VIEW MORE ON GOOGLE COLAB

#calculating the training time
print(f"Training time: {End-Start}s")

# Make predictions
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse transform predictions
train_predict = scalers[0].inverse_transform(train_predict)
test_predict = scalers[0].inverse_transform(test_predict)

# Inverse transform Y_train and Y_test
Y_train_inv = scalers[0].inverse_transform(Y_train.reshape(-1, 1))
Y_test_inv = scalers[0].inverse_transform(Y_test.reshape(-1, 1))

##Root Mean Square Error

The Root Mean Squared Error (RMSE) is **one of the two main performance indicators for a regression model**. It measures the average difference between values predicted by a model and the actual values. It provides an estimation of how well the model is able to predict the target value (accuracy).

from sklearn.metrics import mean_squared_error

# Calculate RMSE
rmse_train = np.sqrt(mean_squared_error(Y_train_inv, train_predict))
rmse_test = np.sqrt(mean_squared_error(Y_test_inv, test_predict))

print("Train RMSE:", rmse_train)
print("Test RMSE:", rmse_test)

# Create a Plotly figure
fig_rmse = go.Figure()

# Add traces for train RMSE and test RMSE
fig_rmse.add_trace(go.Bar(x=['Train'], y=[rmse_train], name='Train RMSE', marker_color='blue'))
fig_rmse.add_trace(go.Bar(x=['Test'], y=[rmse_test], name='Test RMSE', marker_color='red'))

# Update layout
fig_rmse.update_layout(title='Root Mean Squared Error (RMSE)',
                       xaxis_title='Dataset',
                       yaxis_title='RMSE',
                       template='plotly_dark')

# Show the figure
fig_rmse.show()
